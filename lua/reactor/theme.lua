
local c = require('reactor.palette')

local hl = vim.api.nvim_set_hl
local theme = {}

theme.set_highlights = function()

  -- highlights
  hl(0, "Normal", { fg = c.fg, bg = c.bg })
  hl(0, "SignColumn", { fg = 'NONE', bg = c.dark })
  hl(0, "MsgArea", { fg = c.fg, bg = c.dark })
  hl(0, "ModeMsg", { fg = c.fg, bg = c.dark })
  hl(0, "MsgSeparator", { fg = c.fg, bg = c.bg })
  hl(0, "SpellBad", { fg = c.light_red, bg = 'NONE', underline=true, })
  hl(0, "SpellCap", { fg = c.yellow, bg = 'NONE', underline=true, })
  hl(0, "SpellLocal", { fg = c.green, bg = 'NONE', underline=true, })
  hl(0, "SpellRare", { fg = c.purple, bg = 'NONE', underline=true, })
  hl(0, "NormalNC", { fg = c.fg, bg = c.bg })
  hl(0, "Pmenu", { fg = c.light_gray, bg = c.tree_gray, sp = 'NONE', blend=50,  })
  hl(0, "PmenuSel", { fg = 'NONE', bg = c.ui_blue })
  hl(0, "WildMenu", { fg = c.fg, bg = c.ui_blue })
  hl(0, "CursorLineNr", { fg = c.light_gray, bg = 'NONE', bold=true, })
  hl(0, "Comment", { fg = c.context, bg = 'NONE', italic=true, })
  hl(0, "Folded", { fg = c.accent, bg = c.alt_bg })
  hl(0, "FoldColumn", { fg = c.accent, bg = c.alt_bg })
  hl(0, "LineNr", { fg = c.gray, bg = 'NONE' })
  hl(0, "FloatBoder", { fg = c.gray, bg = c.alt_bg })
  hl(0, "Whitespace", { fg = c.bg, bg = 'NONE' })
  hl(0, "VertSplit", { fg = c.gray, bg = c.bg })
  hl(0, "CursorLine", { fg = 'NONE', bg = c.dark_gray })
  hl(0, "CursorColumn", { fg = 'NONE', bg = c.dark_gray })
  hl(0, "ColorColumn", { fg = 'NONE', bg = c.dark_gray })
  hl(0, "NormalFloat", { fg = 'NONE', bg = c.dark_gray })
  hl(0, "Visual", { fg = 'NONE', bg = c.ui_blue, sp = 'NONE', blend=80,  })
  hl(0, "VisualNOS", { fg = 'NONE', bg = c.alt_bg })
  hl(0, "WarningMsg", { fg = c.error_red, bg = c.bg })
  hl(0, "DiffAdd", { fg = c.alt_bg, bg = c.sign_add })
  hl(0, "DiffChange", { fg = c.alt_bg, bg = c.sign_change, underline=true, })
  hl(0, "DiffDelete", { fg = c.alt_bg, bg = c.sign_delete })
  hl(0, "QuickFixLine", { fg = 'NONE', bg = c.ui_blue })
  hl(0, "PmenuSbar", { fg = 'NONE', bg = c.alt_bg })
  hl(0, "PmenuThumb", { fg = 'NONE', bg = c.gray })
  hl(0, "MatchWord", { fg = 'NONE', bg = 'NONE', underline=true, })
  hl(0, "MatchParen", { fg = c.hint_blue, bg = c.bg, underline=true, })
  hl(0, "MatchWordCur", { fg = 'NONE', bg = 'NONE', underline=true, })
  hl(0, "MatchParenCur", { fg = 'NONE', bg = 'NONE', underline=true, })
  hl(0, "Cursor", { fg = c.cursor_fg, bg = c.cursor_bg })
  hl(0, "lCursor", { fg = c.cursor_fg, bg = c.cursor_bg })
  hl(0, "CursorIM", { fg = c.cursor_fg, bg = c.cursor_bg })
  hl(0, "TermCursor", { fg = c.cursor_fg, bg = c.cursor_bg })
  hl(0, "TermCursorNC", { fg = c.cursor_fg, bg = c.cursor_bg })
  hl(0, "Conceal", { fg = c.accent, bg = 'NONE' })
  hl(0, "Directory", { fg = c.blue, bg = 'NONE' })
  hl(0, "SpecialKey", { fg = c.blue, bg = 'NONE', bold=true, })
  hl(0, "Title", { fg = c.blue, bg = 'NONE', bold=true, })
  hl(0, "ErrorMsg", { fg = c.error_red, bg = c.bg, bold=true, })
  hl(0, "Search", { fg = c.light_gray, bg = c.search_blue })
  hl(0, "IncSearch", { fg = c.search_orange, bg = c.light_gray })
  hl(0, "Substitute", { fg = c.light_gray, bg = c.search_orange })
  hl(0, "MoreMsg", { fg = c.orange, bg = 'NONE' })
  hl(0, "Question", { fg = c.orange, bg = 'NONE' })
  hl(0, "EndOfBuffer", { fg = c.bg, bg = 'NONE' })
  hl(0, "NonText", { fg = c.bg, bg = 'NONE' })
  hl(0, "Variable", { fg = c.light_blue, bg = 'NONE' })
  hl(0, "String", { fg = c.light_yellow, bg = 'NONE' })
  hl(0, "Character", { fg = c.light_yellow, bg = 'NONE' })
  hl(0, "Constant", { fg = c.vivid_blue, bg = 'NONE' })
  hl(0, "Number", { fg = c.light_green, bg = 'NONE' })
  hl(0, "Boolean", { fg = c.blue, bg = 'NONE' })
  hl(0, "Float", { fg = c.light_green, bg = 'NONE' })
  hl(0, "Identifier", { fg = c.green, bg = 'NONE', sp = 'NONE', blend=20,  })
  hl(0, "Function", { fg = c.yellow, bg = 'NONE' })
  hl(0, "Operator", { fg = c.fg, bg = 'NONE' })
  hl(0, "Type", { fg = c.cyan, bg = 'NONE' })
  hl(0, "StorageClass", { fg = c.blue, bg = 'NONE' })
  hl(0, "Structure", { fg = c.blue, bg = 'NONE' })
  hl(0, "Typedef", { fg = c.blue, bg = 'NONE' })
  hl(0, "Keyword", { fg = c.blue, bg = 'NONE' })
  hl(0, "Statement", { fg = c.purple, bg = 'NONE' })
  hl(0, "Conditional", { fg = c.blue, bg = 'NONE' })
  hl(0, "Repeat", { fg = c.purple, bg = 'NONE' })
  hl(0, "Label", { fg = c.purple, bg = 'NONE' })
  hl(0, "Exception", { fg = c.purple, bg = 'NONE' })
  hl(0, "Include", { fg = c.purple, bg = 'NONE' })
  hl(0, "PreProc", { fg = c.purple, bg = 'NONE' })
  hl(0, "Define", { fg = c.purple, bg = 'NONE' })
  hl(0, "Macro", { fg = c.purple, bg = 'NONE' })
  hl(0, "PreCondit", { fg = c.purple, bg = 'NONE' })
  hl(0, "Special", { fg = c.orange, bg = 'NONE' })
  hl(0, "SpecialChar", { fg = c.white, bg = 'NONE' })
  hl(0, "Tag", { fg = c.blue, bg = 'NONE' })
  hl(0, "Debug", { fg = c.red, bg = 'NONE' })
  hl(0, "Delimiter", { fg = c.gray, bg = 'NONE' })
  hl(0, "SpecialComment", { fg = c.gray, bg = 'NONE' })
  hl(0, "Underlined", { fg = 'NONE', bg = 'NONE', underline=true, })
  hl(0, "Bold", { fg = 'NONE', bg = 'NONE', bold=true, })
  hl(0, "Italic", { fg = 'NONE', bg = 'NONE', italic=true, })
  hl(0, "Ignore", { fg = c.cyan, bg = c.bg, bold=true, })
  hl(0, "Todo", { fg = c.magenta, bg = c.bg, bold=true, })
  hl(0, "Error", { fg = c.error_red, bg = c.bg, bold=true, })
  hl(0, "TabLine", { fg = c.light_gray, bg = c.line })
  hl(0, "TabLineSel", { fg = c.white, bg = c.line, bold=true, })
  hl(0, "TabLineFill", { fg = c.gray, bg = c.line })

  -- Telescope
  hl(0, "TelescopeSelection", { fg = c.hint_blue, bg = 'NONE' })
  hl(0, "TelescopeMatching", { fg = c.info_yellow, bg = 'NONE', bold=true, })
  hl(0, "TelescopeBorder", { fg = c.blue, bg = c.bg })

  -- Treesitter
  hl(0, "TSComment", { link = 'Comment' })
  hl(0, "TSAnnotation", { fg = c.green, bg = 'NONE', bold=true, })
  hl(0, "TSAttribute", { fg = c.cyan, bg = 'NONE' })
  hl(0, "TSConstructor", { fg = c.yellow, bg = 'NONE', bold=true, })
  hl(0, "TSType", { fg = c.cyan, bg = 'NONE', sp = 'NONE', blend=50,  })
  hl(0, "TSTypeBuiltin", { fg = c.orange, bg = 'NONE', sp = 'NONE', blend=50,  })
  hl(0, "TSConditional", { fg = c.yellow, bg = 'NONE' })
  hl(0, "TSException", { fg = c.purple, bg = 'NONE' })
  hl(0, "TSInclude", { fg = c.purple, bg = 'NONE' })
  hl(0, "TSKeywordReturn", { fg = c.purple, bg = 'NONE' })
  hl(0, "TSKeyword", { fg = c.purple, bg = 'NONE' })
  hl(0, "TSKeywordFunction", { fg = c.purple, bg = 'NONE' })
  hl(0, "TSLabel", { fg = c.light_blue, bg = 'NONE' })
  hl(0, "TSNamespace", { link = 'TSAnnotation' })
  hl(0, "TSRepeat", { fg = c.yellow, bg = 'NONE' })
  hl(0, "TSConstant", { fg = c.red, bg = 'NONE' })
  hl(0, "TSConstBuiltin", { fg = c.red, bg = 'NONE' })
  hl(0, "TSFloat", { fg = c.orange, bg = 'NONE' })
  hl(0, "TSNumber", { fg = c.orange, bg = 'NONE' })
  hl(0, "TSBoolean", { fg = c.orange, bg = 'NONE' })
  hl(0, "TSCharacter", { fg = c.green, bg = 'NONE' })
  hl(0, "TSError", { fg = c.error_red, bg = 'NONE' })
  hl(0, "TSFunction", { fg = c.blue, bg = 'NONE' })
  hl(0, "TSFuncBuiltin", { fg = c.blue, bg = 'NONE' })
  hl(0, "TSMethod", { fg = c.blue, bg = 'NONE' })
  hl(0, "TSConstMacro", { fg = c.orange, bg = 'NONE' })
  hl(0, "TSFuncMacro", { fg = c.blue, bg = 'NONE' })
  hl(0, "TSVariable", { fg = c.light_blue, bg = 'NONE' })
  hl(0, "TSVariableBuiltin", { fg = c.red, bg = 'NONE' })
  hl(0, "TSProperty", { fg = c.red, bg = 'NONE' })
  hl(0, "TSField", { fg = c.fg, bg = 'NONE' })
  hl(0, "TSParameter", { fg = c.red, bg = 'NONE' })
  hl(0, "TSParameterReference", { fg = c.red, bg = 'NONE' })
  hl(0, "TSSymbol", { fg = c.light_blue, bg = 'NONE' })
  hl(0, "TSText", { fg = c.alt_fg, bg = 'NONE' })
  hl(0, "TSOperator", { fg = c.alt_fg, bg = 'NONE' })
  hl(0, "TSPunctDelimiter", { fg = c.alt_fg, bg = 'NONE' })
  hl(0, "TSTagDelimiter", { fg = c.alt_fg, bg = 'NONE' })
  hl(0, "TSTagAttribute", { fg = c.orange, bg = 'NONE' })
  hl(0, "TSPunctBracket", { fg = c.alt_fg, bg = 'NONE' })
  hl(0, "TSPunctSpecial", { fg = c.purple, bg = 'NONE' })
  hl(0, "TSString", { fg = c.green, bg = 'NONE' })
  hl(0, "TSStringRegex", { fg = c.green, bg = 'NONE' })
  hl(0, "TSStringEscape", { fg = c.green, bg = 'NONE' })
  hl(0, "TSTag", { fg = c.blue, bg = 'NONE' })
  hl(0, "TSEmphasis", { fg = 'NONE', bg = 'NONE', italic=true, })
  hl(0, "TSUnderline", { fg = 'NONE', bg = 'NONE', underline=true, })
  hl(0, "TSTitle", { fg = c.fg, bg = 'NONE',  })
  hl(0, "TSLiteral", { fg = c.orange, bg = 'NONE' })
  hl(0, "TSURI", { fg = c.orange, bg = 'NONE', underline=true, })
  hl(0, "TSKeywordOperator", { fg = c.purple, bg = 'NONE' })
  hl(0, "TSStructure", { fg = c.light_blue, bg = 'NONE' })
  hl(0, "TSStrong", { fg = c.blue, bg = 'NONE', bold=true, })
  hl(0, "TSQueryLinterError", { fg = c.warning_orange, bg = 'NONE' })
  hl(0, "TreesitterContext", { fg = 'NONE', bg = c.tree_gray })

  -- NvimTree
  hl(0, "NvimTreeFolderIcon", { fg = c.folder_blue, bg = 'NONE' })
  hl(0, "NvimTreeIndentMarker", { fg = '#c5c5c5', bg = 'NONE' })
  hl(0, "NvimTreeNormal", { fg = c.light_gray, bg = c.tree_gray })
  hl(0, "NvimTreeVertSplit", { fg = c.alt_bg, bg = c.alt_bg })
  hl(0, "NvimTreeFolderName", { fg = c.folder_blue, bg = 'NONE' })
  hl(0, "NvimTreeOpenedFolderName", { fg = c.folder_blue, bg = 'NONE', bold=true, italic=true, })
  hl(0, "NvimTreeEmptyFolderName", { fg = c.gray, bg = 'NONE', italic=true, })
  hl(0, "NvimTreeGitIgnored", { fg = c.gray, bg = 'NONE', italic=true, })
  hl(0, "NvimTreeImageFile", { fg = c.light_gray, bg = 'NONE' })
  hl(0, "NvimTreeSpecialFile", { fg = c.orange, bg = 'NONE' })
  hl(0, "NvimTreeEndOfBuffer", { fg = c.tree_gray, bg = 'NONE' })
  hl(0, "NvimTreeCursorLine", { fg = 'NONE', bg = '#282b37' })
  hl(0, "NvimTreeGitignoreIcon", { fg = '#E64A19', bg = 'NONE' })
  hl(0, "NvimTreeGitStaged", { fg = c.tree_sign_add, bg = 'NONE' })
  hl(0, "NvimTreeGitNew", { fg = c.tree_sign_add, bg = 'NONE' })
  hl(0, "NvimTreeGitRenamed", { fg = c.tree_sign_add, bg = 'NONE' })
  hl(0, "NvimTreeGitDeleted", { fg = c.sign_delete, bg = 'NONE' })
  hl(0, "NvimTreeGitMerge", { fg = c.tree_sign_change, bg = 'NONE' })
  hl(0, "NvimTreeGitDirty", { fg = c.tree_sign_change, bg = 'NONE' })
  hl(0, "NvimTreeSymlink", { fg = c.cyan, bg = 'NONE' })
  hl(0, "NvimTreeRootFolder", { fg = c.fg, bg = 'NONE', bold=true, })
  hl(0, "NvimTreeExecFile", { fg = '#9FBA89', bg = 'NONE' })

  -- StatusLine
  hl(0, "StatusLine", { fg = c.line, bg = c.gray })
  hl(0, "StatusLineNC", { fg = c.line, bg = c.gray })
  hl(0, "StatusLineSeparator", { fg = c.line, bg = 'NONE' })
  hl(0, "StatusLineTerm", { fg = c.line, bg = 'NONE' })
  hl(0, "StatusLineTermNC", { fg = c.line, bg = 'NONE' })

  -- Buffer
  hl(0, "BufferCurrent", { fg = c.fg, bg = c.bg })
  hl(0, "BufferCurrentIndex", { fg = c.fg, bg = c.bg })
  hl(0, "BufferCurrentMod", { fg = c.info_yellow, bg = c.bg })
  hl(0, "BufferCurrentSign", { fg = c.hint_blue, bg = c.bg })
  hl(0, "BufferCurrentTarget", { fg = c.red, bg = c.bg, bold=true, })
  hl(0, "BufferVisible", { fg = c.fg, bg = c.bg })
  hl(0, "BufferVisibleIndex", { fg = c.fg, bg = c.bg })
  hl(0, "BufferVisibleMod", { fg = c.info_yellow, bg = c.bg })
  hl(0, "BufferVisibleSign", { fg = c.gray, bg = c.bg })
  hl(0, "BufferVisibleTarget", { fg = c.red, bg = c.bg, bold=true, })
  hl(0, "BufferInactive", { fg = c.gray, bg = c.alt_bg })
  hl(0, "BufferInactiveIndex", { fg = c.gray, bg = c.alt_bg })
  hl(0, "BufferInactiveMod", { fg = c.info_yellow, bg = c.alt_bg })
  hl(0, "BufferInactiveSign", { fg = c.gray, bg = c.alt_bg })
  hl(0, "BufferInactiveTarget", { fg = c.red, bg = c.alt_bg, bold=true, })

  -- LuaLine
  hl(0, "lualine_a_insert", { fg = c.dark_gray, bg = c.dark_blue, bold=true, })
end

return theme